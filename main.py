import telebot
import Constant as Const

from telebot import types #Connecting Necessary Python libraries...

bot = telebot.TeleBot(Const.API_KEY) #Connecting Telegram Bot API...

#Command start Response
@bot.message_handler(commands=['start'])
def welcome(message):
    sti = open('stickers/hi.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)

    #keyboard configurations:
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ê–Ω–∞–ª–∏–∑ MEI üìí") #Analyzing Movement Efficiency Indicator (MEI) based on special Formulas
    item2 = types.KeyboardButton("–°–µ—Ä–≤–∏—Å—ã –¢–∞–∫—Å–∏ üöï") #Rating top #3 the best Taxi services in Kazakhstan based on website/API
    item3 = types.KeyboardButton("–û—Ü–µ–Ω–∫–∞ –¢–∞–∫—Å–∏ üöñ") #Evaluate Taxi Services in your point of view based on Online Surveys System

    markup.add(item1, item2, item3)

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name} {0.last_name}üëã\n\nüîπ –ú–µ–Ω—è –∑–æ–≤—É—Ç - {1.first_name}, —è –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ü–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç - <u>MEI</u>!\nüîπ –î–ª—è –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É!\n\n<b>‚ùó MEI - Movement Efficiency Indicator ‚ùó</b>".format(message.from_user, bot.get_me()), reply_markup=markup, parse_mode='html')

#Command help Response
@bot.message_handler(commands=['help'])
def welcome(message):
    sti = open('stickers/possible.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)

    bot.send_message(message.chat.id, f"‚ô¶Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º: \n‚ô£Ô∏è <b>Email:</b> supwithproject@gmail.com \n‚ô•Ô∏è <b>Telegram:</b> @grembim \n‚ô†Ô∏è <b>Instagram:</b> @grembim \n<b>üÉè Author:</b> Zhalgasbayev Arman (Developer)", parse_mode='html')

#Main text messages Responses
@bot.message_handler(content_types=['text'])
def func(message):
    if message.chat.type == 'private':
        if message.text == '–ê–Ω–∞–ª–∏–∑ MEI üìí':
            bot.send_message(message.chat.id, f"1Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å —É—Å–ª—É–≥–∞–º–∏ —Ç–∞–∫—Å–∏ –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏?\n\n‚ùï <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ö–û–õ–ò–ß–ï–°–¢–í–û</i> ‚ùï", parse_mode='html')
            bot.register_next_step_handler(message, get_taxi_work_day)
            #This command for registring the next step(question) for starting question || linked questions to get analytical data!
        elif message.text == '–°–µ—Ä–≤–∏—Å—ã –¢–∞–∫—Å–∏ üöï':
            bot.send_message(message.chat.id, f"üöï <b>–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã —Ç–∞–∫—Å–∏: Yandex Go, Uber, inDriver –∏–ª–∏ DiDi?</b> \nüîπ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–æ–µ —Ç–∞–∫—Å–∏ –¥–µ—à–µ–≤–ª–µ, –±—ã—Å—Ç—Ä–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ.\n\n<b>–ê–≤—Ç–æ—Ä:</b> –ö–∞–º–∏–ª–∞ –ö—É—Ä–∫—É–º–±–∞–µ–≤–∞\n<b>–î–∞—Ç–∞:</b> 2021 –ò—é–ª—è, 29\n<b>–í—Ä–µ–º—è –ü—Ä–æ—á–∏—Ç–∞–Ω–∏—è:</b> 11 –º–∏–Ω—É—Ç\n\nüîó <a href='https://the-steppe.com/gorod/sravnivaem-servisy-taksi-yandex-go-uber-indriver-ili-didi'>Steppe - –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∞–π—Ç –æ –∂–∏–∑–Ω–∏, —Ä–∞–±–æ—Ç–µ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è—Ö.</a>", parse_mode='html')
            #Simple post like in telegram popular channels!
        elif message.text == '–û—Ü–µ–Ω–∫–∞ –¢–∞–∫—Å–∏ üöñ':
            sti = open('stickers/believe.webp', 'rb')
            bot.send_sticker(message.chat.id, sti)
            bot.send_message(message.chat.id, f"üîó <a href='https://docs.google.com/forms/d/e/1FAIpQLSd_122FzHVD6IttNvORHyEQAHB8xl52ybGtolkN_viQAzt51A/viewform?usp=sf_link'>Skadi - –û—Ü–µ–Ω–∫–∞ Taxi üöñ</a>", parse_mode='html')
            #Survey for our Taxi services based on Google Forms!
        else:
            #Default response to 
            sti = open('stickers/miss.webp', 'rb')
            bot.send_sticker(message.chat.id, sti)
            bot.send_message(message.chat.id, '–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤–∞—Å!')
#Getting data for analytics using sequence of linked questions!
def get_taxi_work_day(message):
    if message.text.isdigit(): #Checker for digits in message, cuz it causes a bug if it is not clear number!
        global tax1
        tax1 = int(message.text)
        bot.send_message(message.chat.id, f"2Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å —É—Å–ª—É–≥–∞–º–∏ —Ç–∞–∫—Å–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏?\n\n‚ùï <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ö–û–õ–ò–ß–ï–°–¢–í–û</i> ‚ùï", parse_mode='html')
        bot.register_next_step_handler(message, get_taxi_week_day)
    else:
        sti = open('stickers/panic.webp', 'rb')
        bot.send_sticker(message.chat.id, sti)
        bot.send_message(message.chat.id, '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å–∏–º –≤–∞–º –≤–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –¶–ò–§–†–ê–•, –ë–ï–ó –ü–†–û–ë–õ–ï–õ–û–í, –ò–ù–´–• –¶–ò–§–† –ò –ë–£–ö–í ‚ùó\n\n‚ùï –ü—Ä–æ—à—É –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é-–ø–∞–Ω–µ–ª—å ‚ùï')

def get_taxi_week_day(message):
    if message.text.isdigit():
        global tax2
        tax2 = int(message.text)
        bot.send_message(message.chat.id, f"3Ô∏è‚É£ –ö–∞–∫–æ–≤–∞ —Å—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ —Ç–∞–∫—Å–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å?\n\n‚ùï <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¢–ï–ù–ì–ï</i> ‚ùï", parse_mode='html')
        bot.register_next_step_handler(message, get_taxi_price)
    else:
        sti = open('stickers/panic.webp', 'rb')
        bot.send_sticker(message.chat.id, sti)
        bot.send_message(message.chat.id, '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å–∏–º –≤–∞–º –≤–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –¶–ò–§–†–ê–•, –ë–ï–ó –ü–†–û–ë–õ–ï–õ–û–í, –ò–ù–´–• –¶–ò–§–† –ò –ë–£–ö–í ‚ùó\n\n‚ùï –ü—Ä–æ—à—É –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é-–ø–∞–Ω–µ–ª—å ‚ùï')

def get_taxi_price(message):
    if message.text.isdigit():
        global taxiprice
        taxiprice = int(message.text)
        bot.send_message(message.chat.id, f"4Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º —É—Ö–æ–¥–∏—Ç –Ω–∞ –æ–¥–Ω—É –ø–æ–µ–∑–¥–∫—É –≤ —Ç–∞–∫—Å–∏, —É—á–∏—Ç—ã–≤–∞—è –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è?\n\n‚ùï <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ú–ò–ù–£–¢–ê–•</i> ‚ùï", parse_mode='html')
        bot.register_next_step_handler(message, get_taxi_time)
    else:
        sti = open('stickers/panic.webp', 'rb')
        bot.send_sticker(message.chat.id, sti)
        bot.send_message(message.chat.id, '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å–∏–º –≤–∞–º –≤–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –¶–ò–§–†–ê–•, –ë–ï–ó –ü–†–û–ë–õ–ï–õ–û–í, –ò–ù–´–• –¶–ò–§–† –ò –ë–£–ö–í ‚ùó\n\n‚ùï –ü—Ä–æ—à—É –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é-–ø–∞–Ω–µ–ª—å ‚ùï')

def get_taxi_time(message):
    if message.text.isdigit():
        global taxitime
        taxitime = int(message.text)
        bot.send_message(message.chat.id, f"5Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç –æ–¥–Ω–∞ –ø–æ–µ–∑–¥–∫–∞ –Ω–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ, —É—á–∏—Ç—ã–≤–∞—è –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è?\n\n‚ùï <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ú–ò–ù–£–¢–ê–•</i> ‚ùï", parse_mode='html')
        bot.register_next_step_handler(message, get_bus_time)
    else:
        sti = open('stickers/panic.webp', 'rb')
        bot.send_sticker(message.chat.id, sti)
        bot.send_message(message.chat.id, '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å–∏–º –≤–∞–º –≤–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –¶–ò–§–†–ê–•, –ë–ï–ó –ü–†–û–ë–õ–ï–õ–û–í, –ò–ù–´–• –¶–ò–§–† –ò –ë–£–ö–í ‚ùó\n\n‚ùï –ü—Ä–æ—à—É –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é-–ø–∞–Ω–µ–ª—å ‚ùï')

def get_bus_time(message):
    if message.text.isdigit():
        global bustime
        bustime = int(message.text)
        bot.send_message(message.chat.id, f"6Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –±–∏–ª–µ—Ç –Ω–∞ –æ–¥–Ω—É –ø–æ–µ–∑–¥–∫—É –Ω–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ?\n\n‚ùï <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¢–ï–ù–ì–ï</i> ‚ùï", parse_mode='html')
        bot.register_next_step_handler(message, get_bus_price)
    else:
        sti = open('stickers/panic.webp', 'rb')
        bot.send_sticker(message.chat.id, sti)
        bot.send_message(message.chat.id, '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å–∏–º –≤–∞–º –≤–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –¶–ò–§–†–ê–•, –ë–ï–ó –ü–†–û–ë–õ–ï–õ–û–í, –ò–ù–´–• –¶–ò–§–† –ò –ë–£–ö–í ‚ùó\n\n‚ùï –ü—Ä–æ—à—É –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é-–ø–∞–Ω–µ–ª—å ‚ùï')

def get_bus_price(message):
    if message.text.isdigit():
        global busprice
        busprice = int(message.text)
        bot.send_message(message.chat.id, f"7Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –≤ –º–µ—Å—è—Ü?\n\n‚ùï <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¢–ï–ù–ì–ï</i> ‚ùï", parse_mode='html')
        bot.register_next_step_handler(message, get_salary)
    else:
        sti = open('stickers/panic.webp', 'rb')
        bot.send_sticker(message.chat.id, sti)
        bot.send_message(message.chat.id, '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å–∏–º –≤–∞–º –≤–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –¶–ò–§–†–ê–•, –ë–ï–ó –ü–†–û–ë–õ–ï–õ–û–í, –ò–ù–´–• –¶–ò–§–† –ò –ë–£–ö–í ‚ùó\n\n‚ùï –ü—Ä–æ—à—É –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é-–ø–∞–Ω–µ–ª—å ‚ùï')

def get_salary(message):
#Here we have not checker for digit type, cuz it is utf-8 errors in final result :(
    global salary
    salary = int(message.text)
    
#Cool sticker send:D
    sti = open('stickers/cool.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)

#Inline keyboard
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–ï—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ üíÅ‚Äç‚ôÇÔ∏è", callback_data='facts')
    item2 = types.InlineKeyboardButton("–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è Skadi ü§ñ", callback_data='review')
    markup.add(item1, item2)
    global taxisum, ecotime
    taxisum = (tax1*5+tax2*2)*taxiprice*4
    taxipart = round((taxisum/salary)*100)
    econom = taxisum-(tax1*30+tax2*12)*busprice
    ecotime = (tax1*30+tax2*12)*bustime-(tax1*5+tax2*2)*taxitime*4
    bot.send_message(message.chat.id, f"–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è), {message.from_user.first_name} {message.from_user.last_name}! \nüìä –Ø —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ü–µ–Ω–∏–ª–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ MEI –¥–ª—è –≤–∞—Å. \n<b>üîπ –ü–æ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤ –ú–ï–°–Ø–¶:</b> \n–í—ã –≤ —Å—Ä–µ–¥–Ω–µ–º —Ç—Ä–∞—Ç–∏—Ç–µ <b>{taxisum} –¢–µ–Ω–≥–µ(KZT)</b> –Ω–∞ —Ç–∞–∫—Å–∏. \nüîπ –í–∞—à–∏ —Å—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ç–∞–∫—Å–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç <b>{taxipart}%</b> –æ—Ç –≤–∞—à–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞. \nüîπ –í —Ü–µ–ª–æ–º, –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤—ã –±—ã —Å–º–æ–≥–ª–∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤ –º–µ—Å—è—Ü <b>{econom} –¢–µ–Ω–≥–µ</b>, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –≤—ã —Ç–µ—Ä—è–µ—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –∫–∞—á–µ—Å—Ç–≤–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. \nüîπ –í–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –∑–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü –∏—Å–ø–æ–ª—å–∑—É—è —Ç–∞–∫—Å–∏ –≤—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ —Ü–µ–ª—ã—Ö <b>{ecotime} –º–∏–Ω—É—Ç</b> —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! \n\n–ü–æ–¥–≤–æ–¥—è –∫ –∏—Ç–æ–≥—É, —É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –≤–∞—à –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª, –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ —Ç–∞–∫—Å–∏!".format(message.from_user, bot.get_me()), reply_markup=markup, parse_mode='html')

#Inline Keys Trigger
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'facts':
                sti = open('stickers/hard.webp', 'rb')
                bot.send_sticker(call.message.chat.id, sti)
                taxinum = (tax1*5+tax2*2)*48
                bot.send_message(call.message.chat.id, f"<b>üîπ –ü–æ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤ –ì–æ–¥:</b> \n–í—ã –≤ —Å—Ä–µ–¥–Ω–µ–º —Ç—Ä–∞—Ç–∏—Ç–µ <b>{taxisum*12} –¢–µ–Ω–≥–µ(KZT)</b> –Ω–∞ —Ç–∞–∫—Å–∏. \nüîπ –í —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –≥–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–∞–∫—Å–∏ –≤—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ <b>{ecotime*12} –º–∏–Ω—É—Ç</b> —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!\nüîπ –í —Ü–µ–ª–æ–º, –≤—ã —Å–æ–≤–µ—Ä—à–∞–µ—Ç–µ –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏ –æ–∫–æ–ª–æ <b>{taxinum}</b> —Ä–∞–∑!", parse_mode='html')
            elif call.data == 'review':
                sti = open('stickers/swish.webp', 'rb')
                bot.send_sticker(call.message.chat.id, sti)
                bot.send_message(call.message.chat.id, "üîπ –í—ã –º–Ω–µ —Ç–æ–∂–µ –Ω—Ä–∞–≤–∏—Ç–µ—Å—å ü§ó \n\nüîπ –ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –æ—Ü–µ–Ω–∫—É üòá")

    except Exception as e:
        print(repr(e))

# RUN
bot.polling(none_stop=True)